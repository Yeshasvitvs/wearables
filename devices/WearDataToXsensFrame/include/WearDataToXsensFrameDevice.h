/*
 * Copyright (C) 2018 Istituto Italiano di Tecnologia (IIT)
 * All rights reserved.
 *
 * This software may be modified and distributed under the terms of the
 * GNU Lesser General Public License v2.1 or any later version.
 */

#ifndef WEAR_DATA_TO_XSENS_FRAME_DEVICE_H
#define WEAR_DATA_TO_XSENS_FRAME_DEVICE_H

#include <yarp/dev/DeviceDriver.h>
#include <yarp/os/BufferedPort.h>
#include <yarp/os/TypedReaderCallback.h>

// from input thrift autogenerated
#include "thrift/WearData.h"
// from output thrift autogenerated
#include "thrift/XsensSegmentsFrame.h"
#include "thrift/XsensSensorsFrame.h"

namespace yarp {
    namespace dev {
        class WearDataToXsensFrameDevice;
    } // namespace dev
} // namespace yarp

class yarp::dev::WearDataToXsensFrameDevice
    : public yarp::dev::DeviceDriver
    , public yarp::os::TypedReaderCallback<wearable::msg::WearData>
{
private:
    // input port from Xsens data
    yarp::os::BufferedPort<wearable::msg::WearData> m_xsensDataPort;
    // output ports to the HDE
    yarp::os::BufferedPort<xsens::XsensSegmentsFrame> m_xsensSegmentsPortToHDE;
    yarp::os::BufferedPort<xsens::XsensSensorsFrame> m_xsensSensorsPortToHDE;

    // default size for link-related vectors
    unsigned m_linkVectorSize;
    // default size for sensor-related vectors
    unsigned m_sensorVectorSize;

public:
    WearDataToXsensFrameDevice() = default;
    ~WearDataToXsensFrameDevice() override = default;

    // DeviceDriver interface
    bool open(yarp::os::Searchable& config) override;
    bool close() override;

    // TypedReaderCallback
    void onRead(wearable::msg::WearData& inData) override;
};

#endif // WEAR_DATA_TO_XSENS_FRAME_DEVICE_H
